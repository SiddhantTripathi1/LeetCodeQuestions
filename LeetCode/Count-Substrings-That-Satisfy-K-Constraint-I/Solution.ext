class Solution(object):
    def countKConstraintSubstrings(self, s, k):
        n = len(s)
        left = 0
        count_zeros = 0
        count_ones = 0
        result = 0
        
        for right in range(n):
            if s[right] == '0':
                count_zeros += 1
            if s[right] == '1':
                count_ones += 1
            
            # Maintain the window with at most k '0's or '1's
            while count_zeros > k and count_ones > k:
                if s[left] == '0':
                    count_zeros -= 1
                if s[left] == '1':
                    count_ones -= 1
                left += 1
            
            # The number of valid substrings ending at right
            result += (right - left + 1)
        
        return result
        """
        :type s: str
        :type k: int
        :rtype: int
        """
         